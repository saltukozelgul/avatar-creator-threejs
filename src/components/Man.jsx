/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: Jan BlÃ¡ha (https://sketchfab.com/swifterik)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/vincent-vega-426e2fe4a13c4cc78b280b4d76c72007
title: Vincent Vega
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useLoader } from "@react-three/fiber";
import { RepeatWrapping, TextureLoader } from "three";
import { useCharacterAnimations } from "../contexts/CharacterAnimations";
import { useCharacterCustomization } from "../contexts/CharacterCustomization";

export default function Man(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/models/man/scene.gltf')
  const { setAnimations, animationIndex } = useCharacterAnimations();
  const { actions, names } = useAnimations(animations, group)
  const { buttonsColor, suitColor, setEyeColor, setShirtColor, setShoesColor, hairColor, skinColor, eyeColor, mouthColor, shirtColor, shoesColor, pantsColor, soleColor, laceColor, morphTargetDictionary, morphTargetInfluences, setMorphTargetDictionary, setMorphTargetInfluences, shirtTextureIndex, pantTextureIndex } = useCharacterCustomization();
  const [shirtTexture, setShirtTexture] = useState(useLoader(TextureLoader, "./shirt_textures/1.jpg"));
  const [pantTexture, setPantTexture] = useState(useLoader(TextureLoader, "./pant_textures/1.jpg"));

  useEffect(() => {
    setAnimations(names);
  }, [names]);

  useEffect(() => {
      var temp_shirtTexture = new TextureLoader().load("./shirt_textures/" + shirtTextureIndex + ".jpg");
      temp_shirtTexture.wrapS = RepeatWrapping;
      temp_shirtTexture.wrapT = RepeatWrapping;
      temp_shirtTexture.repeat.set(4, 4);
      setShirtTexture(temp_shirtTexture);
  }, [shirtTextureIndex]);

  useEffect(() => {
      var temp_pantTexture = new TextureLoader().load("./pant_textures/" + pantTextureIndex + ".jpg");
      temp_pantTexture.repeat.set(1, 1);
      setPantTexture(temp_pantTexture);
  }, [pantTextureIndex]);
    

  useEffect(() => {
    actions[names[animationIndex]].reset().fadeIn(0.5).play();
    return () => {
      actions[names[animationIndex]].fadeOut(0.5);
    };
  }, [animationIndex]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={1.18}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <primitive object={nodes.GLTF_created_0_rootJoint} />
          <skinnedMesh
            geometry={nodes.Object_7.geometry}
            material={materials.shared_hair_brown}
            skeleton={nodes.Object_7.skeleton}
          >
            <meshStandardMaterial color={hairColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_8.geometry}
            material={materials.shared_skin}
            skeleton={nodes.Object_8.skeleton}
          >
            <meshStandardMaterial color={skinColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_9.geometry}
            material={materials.shared_eye_black}
            skeleton={nodes.Object_9.skeleton}
          >
            <meshStandardMaterial color={eyeColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_10.geometry}
            material={materials.shared_eye_white}
            skeleton={nodes.Object_10.skeleton}
          />
          <skinnedMesh
            geometry={nodes.Object_11.geometry}
            material={materials['4_suit']}
            skeleton={nodes.Object_11.skeleton}
          >
            <meshStandardMaterial color={suitColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_12.geometry}
            material={materials['4_shirt']}
            skeleton={nodes.Object_12.skeleton}
          >
            <meshStandardMaterial color={shirtColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_13.geometry}
            material={materials['4_shoes']}
            skeleton={nodes.Object_13.skeleton}
          >
            <meshStandardMaterial color={shoesColor} />
          </skinnedMesh>
          <skinnedMesh
            geometry={nodes.Object_14.geometry}
            material={nodes.Object_14.material}
            skeleton={nodes.Object_14.skeleton}
          >
            <meshStandardMaterial color={buttonsColor} />
          </skinnedMesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/models/man/scene.gltf')
