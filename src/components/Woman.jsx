/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useLoader } from "@react-three/fiber";
import { RepeatWrapping, TextureLoader } from "three";
import { useCharacterAnimations } from "../contexts/CharacterAnimations";
import { useCharacterCustomization } from "../contexts/CharacterCustomization";

function Woman(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("./models/woman.gltf");
  const { setAnimations, animationIndex } = useCharacterAnimations();
  const { actions, names } = useAnimations(animations, group);
  const { hairColor, skinColor, eyeColor, mouthColor, shirtColor, shoesColor, pantsColor, soleColor, laceColor, morphTargetDictionary, morphTargetInfluences, setMorphTargetDictionary, setMorphTargetInfluences, shirtTextureIndex, pantTextureIndex } = useCharacterCustomization();
  
  const [shirtTexture, setShirtTexture] = useState(useLoader(TextureLoader, "./shirt_textures/1.jpg"));
  const [pantTexture, setPantTexture] = useState(useLoader(TextureLoader, "./pant_textures/1.jpg"));

  useEffect(() => {
    setAnimations(names);
  }, [names]);

  useEffect(() => {
      var temp_shirtTexture = new TextureLoader().load("./shirt_textures/" + shirtTextureIndex + ".jpg");
      temp_shirtTexture.wrapS = RepeatWrapping;
      temp_shirtTexture.wrapT = RepeatWrapping;
      temp_shirtTexture.repeat.set(4, 4);
      setShirtTexture(temp_shirtTexture);
  }, [shirtTextureIndex]);

  useEffect(() => {
      var temp_pantTexture = new TextureLoader().load("./pant_textures/" + pantTextureIndex + ".jpg");
      temp_pantTexture.repeat.set(1, 1);
      setPantTexture(temp_pantTexture);
  }, [pantTextureIndex]);
    

  useEffect(() => {
    actions[names[animationIndex]].reset().fadeIn(0.5).play();
    return () => {
      actions[names[animationIndex]].fadeOut(0.5);
    };
  }, [animationIndex]);

  useEffect(() => {
    setMorphTargetDictionary(Object.keys(nodes.Mesh019.morphTargetDictionary));
    setMorphTargetInfluences(nodes.Mesh019.morphTargetInfluences);
  }, []);

  console.log("Shirt Texture: ", shirtTexture);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <group name="SM_Chr_Developer_Female_02">
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019"
              geometry={nodes.Mesh019.geometry}
              material={materials.Glasses}
              skeleton={nodes.Mesh019.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            />
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_1"
              geometry={nodes.Mesh019_1.geometry}
              material={materials.Eyes}
              skeleton={nodes.Mesh019_1.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={eyeColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_2"
              geometry={nodes.Mesh019_2.geometry}
              material={materials.Hair}
              skeleton={nodes.Mesh019_2.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={hairColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_3"
              geometry={nodes.Mesh019_3.geometry}
              material={materials.Skin}
              skeleton={nodes.Mesh019_3.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={skinColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_4"
              geometry={nodes.Mesh019_4.geometry}
              material={materials.Mouth}
              skeleton={nodes.Mesh019_4.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={mouthColor} /> 
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_5"
              geometry={nodes.Mesh019_5.geometry}
              material={materials.Shirt}
              skeleton={nodes.Mesh019_5.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial map={shirtTexture} color={shirtColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_6"
              geometry={nodes.Mesh019_6.geometry}
              material={materials.Pants}
              skeleton={nodes.Mesh019_6.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={pantsColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_7"
              geometry={nodes.Mesh019_7.geometry}
              material={materials.Shoes}
              skeleton={nodes.Mesh019_7.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={shoesColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_8"
              geometry={nodes.Mesh019_8.geometry}
              material={materials.Sole}
              skeleton={nodes.Mesh019_8.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={soleColor} />
            </skinnedMesh>
            <skinnedMesh
              frustumCulled={false}
              castShadow
              name="Mesh019_9"
              geometry={nodes.Mesh019_9.geometry}
              material={materials.Laces}
              skeleton={nodes.Mesh019_9.skeleton}
              morphTargetDictionary={nodes.Mesh019.morphTargetDictionary}
              morphTargetInfluences={morphTargetInfluences}
            >
              <meshStandardMaterial color={laceColor} />
            </skinnedMesh>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("./models/woman.gltf");

export default Woman;
